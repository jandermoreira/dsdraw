%! Package = dsdraw-list
%! Author = Jander Moreira (moreira.jander@gmail.com)
%! Date = 08/2024

\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{dsdraw-list}[2024/08/28 Draw linked lists.]

\RequirePackage{dsdraw-base}

\RequirePackage{tikz}
\usetikzlibrary{calc, chains, arrows, positioning}
\RequirePackage{pgfkeys}
\RequirePackage{etoolbox}


%% Options
\pgfkeys{
    dsdraw list/.cd,
%
    name/.store in = \ds@ListName,
    null/.store in = \ds@ListNull,
    values/.store in = \ds@ListValues,
    length/.store in = \ds@ListLength,
%
    node distance/.store in = \ds@ListNodeDistance,
%
    direction/.is choice,
    direction/right/.code = {
        \tikzset{
            ds@direction/.style = {chain default direction = going right},
            every join/.append style = {link style, hlink},
        }
        \csdef{ds@Dots}{$\cdot\cdot\cdot$}
        \csdef{ds@Frame}{
            \draw ($(\ds@ListName-begin.north west) + (-0.05em, 0.05em)$) rectangle ($(\ds@ListName-end.south east) + (0.05em, -0.05em)$);
        }
    },
    direction/left/.code = {
        \tikzset{
            ds@direction/.style = {chain default direction = going left},
            every join/.append style = {link style, hlink},
        }
        \csdef{ds@Dots}{$\cdot\cdot\cdot$}
        \csdef{ds@Frame}{
            \draw ($(\ds@ListName-end.north west) + (-0.05em, 0.05em)$) rectangle ($(\ds@ListName-begin.south east) + (0.05em, -0.05em)$);
        }
    },
    direction/up/.code = {
        \tikzset{
            ds@direction/.style = {chain default direction = going above},
            every join/.append style = {link style, vlink},
        }
        \csdef{ds@Dots}{\rotatebox{90}{$\cdot\cdot\cdot$}}
        \csdef{ds@Frame}{
            \draw ($(\ds@ListName-end.north west) + (-0.05em, 0.05em)$) rectangle ($(\ds@ListName-begin.south east) + (0.05em, -0.05em)$);
        }
    },
    direction/down/.code = {
        \tikzset{
            ds@direction/.style = {chain default direction = going below},
            every join/.append style = {link style, vlink},
        }
        \csdef{ds@Dots}{\rotatebox{90}{$\cdot\cdot\cdot$}}
        \csdef{ds@Frame}{
            \draw ($(\ds@ListName-begin.north west) + (-0.05em, 0.05em)$) rectangle ($(\ds@ListName-end.south east) + (0.05em, -0.05em)$);
        }
    },
%
    width/.store in = \ds@CellWidth,
    height/.store in = \ds@CellHeight,
%
    linked/.is if = ds@list@Link,
    going down/.code = {%
        \tikzset{
            ds@style/.append style = {continue chain = going below},
            ds@NodeStyle/.style = {on chain = going below},
            every join/.append style = {link style, vlink},
        }%
    },
    going up/.code = {%
        \tikzset{
            ds@style/.append style = {continue chain = going above},
            ds@NodeStyle/.style = {on chain = going above},
            every join/.append style = {link style, vlink},
        }%
    },
    going right/.code = {%
        \tikzset{
            ds@style/.append style = {continue chain = going right},
            ds@NodeStyle/.style = {on chain = going right},
            every join/.append style = {link style, hlink},
        }%
    },
    going left/.code = {%
        \tikzset{
            ds@style/.append style = {continue chain = going left},
            ds@NodeStyle/.style = {on chain = going left},
            every join/.append style = {link style, hlink},
        }%
    },
    not linked/.code = {\DSListSet{linked = false}},
    up/.code = {
        \tikzset{ds@deviate/.style = {yshift = 2 * \ds@ListNodeDistance}}
    },
    down/.code = {
        \tikzset{ds@deviate/.style = {yshift = -2 * \ds@ListNodeDistance}}
    },
    left/.code = {
        \tikzset{ds@deviate/.style = {xshift = -2 * \ds@ListNodeDistance}}
    },
    right/.code = {
        \tikzset{ds@deviate/.style = {xshift = 2 * \ds@ListNodeDistance}}
    },
}

%% Defaults

\NewDocumentCommand{\DSListSet}{ >{ \TrimSpaces } m }{%
    \pgfkeys{/dsdraw list/.cd, #1}%
}

\newbool{ds@list@Link}
\DSListSet{
    name = array,
    null = \footnotesize\textsc{NULL},
    direction = right,
    node distance = 1.5em,
    width = 2.2em,
    height = 2.2em,
    values = {},
    length = 0,
    linked,
}

%% Styles

\tikzset{
    list node/.style = {
        outer sep = 0pt,
        inner sep = 0pt,
        minimum width = \ds@CellWidth,
        minimum height = \ds@CellHeight,
    },
    ds@style/.style = {},
    join list/.code = {%
        \ifbool{ds@list@Link}{\pgfkeysalso{join}}{}%
    },
    link style/.style = {-latex, thick},
    vlink/.style = {
        to path = {|- ($(\tikztotarget)!0.55!(\tikztostart)$) -| (\tikztotarget)
        },
    },
    hlink/.style = {
        to path = {-| ($(\tikztotarget)!0.55!(\tikztostart)$) |- (\tikztotarget)
        },
    },
}

\NewDocumentCommand{\ds@List@gap}{}{
    \node[array element] {\ds@Dots};
}

\NewDocumentCommand{\ds@SplitHelper}{ >{ \TrimSpaces } m >{ \TrimSpaces } m }{%
    \csdef{ds@local@Value}{#1}%
    \IfValueTF{#2}{
        \csdef{ds@local@Options}{#2}%
    }{
        \csdef{ds@local@Options}{}%
    }%%
}
\NewDocumentCommand{\ds@GetOption}{ >{ \SplitArgument {1} {|} } m }{%
    \ds@SplitHelper#1%
}


\NewDocumentCommand{\DSList}{  >{ \TrimSpaces } O{} >{ \TrimSpaces } m }{%
    \begingroup%
    \DSListSet{
        name = list,
        #2
    }%
    \begin{scope}[
        ds@direction,
        link style,
        node distance = \ds@ListNodeDistance,
        #1,
        start chain = \ds@ListName,
    ]
        \csdef{ds@local@NodeNumber}{0}
        %\begingroup
        \ds@IterateList{\ds@local@Content}{\ds@ListValues}{
            \tikzset{
                ds@NodeStyle/.style = {on chain},
                ds@deviate/.style = {},
            }
            \expandafter\ds@GetOption\expandafter{\ds@local@Content}
            \DSListSet{/utils/exec = \pgfkeysalsofrom{\ds@local@Options}}
            \node[list node, ds@NodeStyle, ds@deviate, join list] {};  % in chain
            \node[draw, list node, ds@style] at (\ds@ListName-\tikzchaincount)(\ds@ListName-\ds@local@NodeNumber) {}; % frame
            \node at (\ds@ListName-\ds@local@NodeNumber) {\ds@local@Value\strut}; % value
            \pgfmathsetmacro{\ds@local@NodeNumber}{int(\ds@local@NodeNumber + 1)}
            \tikzset{ds@style/.style = {}} % reset
        }
        %\endgroup
        \whileboolexpr{ test {\ifnumless{\ds@local@NodeNumber}{\ds@ListLength}} }{
            \node[list node, on chain, join list] {};  % in chain
            \node[draw, list node] at (\ds@ListName-\tikzchaincount)(\ds@ListName-\ds@local@NodeNumber) {}; % frame
            \pgfmathsetmacro{\ds@local@NodeNumber}{int(\ds@local@NodeNumber + 1)}
        }
        \node[list node, on chain, join list] {\ds@ListNull};
    \end{scope}
    \endgroup
}