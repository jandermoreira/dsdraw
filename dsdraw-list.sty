%! Package = dsdraw-list
%! Author = Jander Moreira (moreira.jander@gmail.com)
%! Date = 08/2024

\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{dsdraw-list}[2024/08/28 Draw linked lists.]

\RequirePackage{dsdraw-base}

\RequirePackage{tikz}
\usetikzlibrary{calc, chains, arrows, positioning}
\RequirePackage{pgfkeys}
%\RequirePackage{varwidth}
%\RequirePackage{relsize}
\RequirePackage{etoolbox}


%% Options
\pgfkeys{
    dsdraw list/.cd,
%
    name/.store in = \ds@ListName,
    null/.store in = \ds@ListNull,
    values/.store in = \ds@ListValues,
    length/.store in = \ds@ListLength,
%
    node distance/.store in = \ds@ListNodeDistance,
%
    direction/.is choice,
    direction/right/.code = {
        \tikzset{ds@direction/.style = {chain default direction = going right}}
        \csdef{ds@Dots}{$\cdot\cdot\cdot$}
        \csdef{ds@Frame}{
            \draw ($(\ds@ListName-begin.north west) + (-0.05em, 0.05em)$) rectangle ($(\ds@ListName-end.south east) + (0.05em, -0.05em)$);
        }
    },
    direction/left/.code = {
        \tikzset{ds@direction/.style = {chain default direction = going left}}
        \csdef{ds@Dots}{$\cdot\cdot\cdot$}
        \csdef{ds@Frame}{
            \draw ($(\ds@ListName-end.north west) + (-0.05em, 0.05em)$) rectangle ($(\ds@ListName-begin.south east) + (0.05em, -0.05em)$);
        }
    },
    direction/up/.code = {
        \tikzset{ds@direction/.style = {chain default direction = going above}}
        \csdef{ds@Dots}{\rotatebox{90}{$\cdot\cdot\cdot$}}
        \csdef{ds@Frame}{
            \draw ($(\ds@ListName-end.north west) + (-0.05em, 0.05em)$) rectangle ($(\ds@ListName-begin.south east) + (0.05em, -0.05em)$);
        }
    },
    direction/down/.code = {
        \tikzset{ds@direction/.style = {chain default direction = going below}}
        \csdef{ds@Dots}{\rotatebox{90}{$\cdot\cdot\cdot$}}
        \csdef{ds@Frame}{
            \draw ($(\ds@ListName-begin.north west) + (-0.05em, 0.05em)$) rectangle ($(\ds@ListName-end.south east) + (0.05em, -0.05em)$);
        }
    },
%
    width/.store in = \ds@CellWidth,
    height/.store in = \ds@CellHeight,
}

%% Defaults

\NewDocumentCommand{\DSListSet}{ >{ \TrimSpaces } m }{%
    \pgfkeys{/dsdraw list/.cd, #1}%
}

\DSListSet{
    name = array,
    null = \footnotesize\textsc{NULL},
    direction = right,
    node distance = 1.5em,
    width = 2.2em,
    height = 2.2em,
    values = {},
    length = 0,
}

%% Styles

\tikzset{
    node element/.style = {
        outer sep = 0pt,
        inner sep = 0pt,
        minimum width = \ds@CellWidth,
        minimum height = \ds@CellHeight,
    },
    ds@style/.style = {},
}

\NewDocumentCommand{\ds@list@godown}{}{
    \tikzset{ds@style/.append style = {continue chain = going below}}
}
\NewDocumentCommand{\ds@list@goup}{}{
    \tikzset{ds@style/.append style = {continue chain = going above}}
}
\NewDocumentCommand{\ds@list@goleft}{}{
    \tikzset{ds@style/.append style = {continue chain = going left}}
}
\NewDocumentCommand{\ds@list@goright}{}{
    \tikzset{ds@style/.append style = {continue chain = going right}}
}

\NewDocumentCommand{\ds@list@nextstyle}{}{
    \csedef{ds@local@Style}{%
        /tikz/.cd, ds@style/.append style = {\ds@OptionValue}%
    }
    \pgfkeysalsofrom{\ds@local@Style}
}

\NewDocumentCommand{\ds@List@gap}{}{
    \node[array element] {\ds@Dots};
}


\NewDocumentCommand{\DSList}{  >{ \TrimSpaces } O{} >{ \TrimSpaces } m }{%
    \begingroup%
    \pgfkeys{
        dsdraw list/.cd,
        name = list,
        #2
    }%
    \begin{scope}[
        ds@direction,
        node distance = \ds@ListNodeDistance,
        every join/.style = {thick, -latex},
        #1,
        start chain = \ds@ListName,
    ]
        \csdef{ds@local@NodeNumber}{0}
        \ds@IterateList{\ds@local@Value}{\ds@ListValues}{
            \ds@IsValidOption{\ds@local@Value}{
                go-down, go-up, go-left, go-right, next-style,
            }{
                \ds@RunSpecial{list}{\ds@OptionName}
            }{
                \node[node element, on chain, join] {};  % in chain
                \node[draw, node element, ds@style] at (\ds@ListName-\tikzchaincount)(\ds@ListName-\ds@local@NodeNumber) {}; % frame
                \node at (\ds@ListName-\ds@local@NodeNumber) {\ds@local@Value\strut}; % value
                \pgfmathsetmacro{\ds@local@NodeNumber}{int(\ds@local@NodeNumber + 1)}
                \tikzset{ds@style/.style = {}} % reset
            }
        }
        \whileboolexpr{ test {\ifnumless{\ds@local@NodeNumber}{\ds@ListLength}} }{
            \node[node element, on chain, join] {};  % in chain
            \node[draw, node element] at (\ds@ListName-\tikzchaincount)(\ds@ListName-\ds@local@NodeNumber) {}; % frame
            \pgfmathsetmacro{\ds@local@NodeNumber}{int(\ds@local@NodeNumber + 1)}
        }
        \node[node element, on chain, join] {\ds@ListNull};
    \end{scope}
    \endgroup
}