%! Package = dsdraw-array
%! Author = Jander Moreira (moreira.jander@gmail.com)
%! Date = 08/2024

\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{dsdraw-array}[2024/08/28 Draw arrays, such as vectors and matrices.]

\RequirePackage{dsdraw-base}

\RequirePackage{tikz}
\usetikzlibrary{
    calc,
    chains,
    positioning,
}
\RequirePackage{pgfkeys}
\RequirePackage{varwidth}
\RequirePackage{relsize}
\RequirePackage{etoolbox}

%% Options
\newbool{ds@ShowIndexes}
\newbool{ds@UseFrame}

\NewDocumentCommand{\ds@TheeDots}{ m }{%
    \rotatebox{#1}{\ds@ArrayThreeDots}%
}

\pgfkeys{
    dsdraw array/.cd,
%
    name/.store in = \ds@ArrayName,
    dots/.store in = \ds@ArrayThreeDots,
%
    length/.store in = \ds@ArrayWidth,
    values/.store in = \ds@ArrayValues,
    width/.store in = \ds@ArrayWidth,
    height/.store in = \ds@ArrayHeight,
%
    frame distance/.store in = \ds@ArrayFrameDistance,
%
    direction/.is choice,
    direction/right/.code = {
        \tikzset{chain default direction = going right}
        \pgfkeysalso{indexes = below}
        \csdef{ds@Dots}{\ds@TheeDots{0}}
        \csdef{ds@Frame}{
            \draw ($(\ds@ArrayName-begin.north west) + (-\ds@ArrayFrameDistance, \ds@ArrayFrameDistance)$) rectangle ($(\ds@ArrayName-end.south east) + (\ds@ArrayFrameDistance, -\ds@ArrayFrameDistance)$);
        }
        \csdef{ds@ArrayFrom}{\ds@OpenRight}
        \csdef{ds@ArrayTo}{\ds@OpenLeft}
    },
    direction/left/.code = {
        \tikzset{chain default direction = going left}
        \pgfkeysalso{indexes = below}
        \csdef{ds@Dots}{\ds@TheeDots{180}}
        \csdef{ds@Frame}{
            \draw ($(\ds@ArrayName-end.north west) + (-\ds@ArrayFrameDistance, \ds@ArrayFrameDistance)$) rectangle ($(\ds@ArrayName-begin.south east) + (\ds@ArrayFrameDistance, -\ds@ArrayFrameDistance)$);
        }
        \csdef{ds@ArrayFrom}{\ds@OpenLeft}
        \csdef{ds@ArrayTo}{\ds@OpenRight}
    },
    direction/up/.code = {
        \tikzset{chain default direction = going above}
        \pgfkeysalso{indexes = left}
        \csdef{ds@Dots}{\ds@TheeDots{90}}
        \csdef{ds@Frame}{
            \draw ($(\ds@ArrayName-end.north west) + (-\ds@ArrayFrameDistance, \ds@ArrayFrameDistance)$) rectangle ($(\ds@ArrayName-begin.south east) + (\ds@ArrayFrameDistance, -\ds@ArrayFrameDistance)$);
        }
        \csdef{ds@ArrayFrom}{\ds@OpenAbove}
        \csdef{ds@ArrayTo}{\ds@OpenBelow}
    },
    direction/down/.code = {
        \tikzset{chain default direction = going below}
        \pgfkeysalso{indexes = left}
        \csdef{ds@Dots}{\ds@TheeDots{-90}}
        \csdef{ds@Frame}{
            \draw ($(\ds@ArrayName-begin.north west) + (-\ds@ArrayFrameDistance, \ds@ArrayFrameDistance)$) rectangle ($(\ds@ArrayName-end.south east) + (\ds@ArrayFrameDistance, -\ds@ArrayFrameDistance)$);
        }
        \csdef{ds@ArrayFrom}{\ds@OpenBelow}
        \csdef{ds@ArrayTo}{\ds@OpenAbove}
    },
%
    first index/.store in = \ds@FirstIndex,
    indexes/.is choice,
    indexes/above/.code = {
        \tikzset{array index/.style = {above = of ##1.north, align = center, yshift = \ds@ArrayFrameDistance}}
        \booltrue{ds@ShowIndexes}
    },
    indexes/below/.code = {
        \tikzset{array index/.style = {below = of ##1.south, align = center, yshift = -\ds@ArrayFrameDistance}}
        \booltrue{ds@ShowIndexes}
    },
    indexes/left/.code = {
        \tikzset{array index/.style = {left = of ##1.west, align = right,
            xshift = -\ds@ArrayFrameDistance}}
        \booltrue{ds@ShowIndexes}
    },
    indexes/right/.code = {
        \tikzset{array index/.style = {right = of ##1.east, align = left,
            xshift = \ds@ArrayFrameDistance}}
        \booltrue{ds@ShowIndexes}
    },
    indexes/none/.code = {\boolfalse{ds@ShowIndexes}},
%
    frame/.is if = ds@UseFrame,
    item width/.store in = \ds@CellWidth,
    item height/.store in = \ds@CellHeight,
}

%% Defaults

\NewDocumentCommand{\DSArraySet}{ >{ \TrimSpaces } m }{%
    \pgfkeys{/dsdraw array/.cd, #1}%
}

\DSArraySet{
    name = array,
    length = 1,
    values = {},
    direction = right,
    first index = 0,
    frame = false,
    item width = 2.2em,
    item height = 2.2em,
    dots = $\cdot\cdot\cdot$,
    frame distance = 0.1em,
}

%% Styles

\tikzset{
    array element/.style = {
        inner sep = 0pt,
        outer sep = 0pt,
        minimum width = \ds@CellWidth,
        minimum height = \ds@CellHeight,
        on chain,
    },
    index element/.style = {
        baseline,
        minimum width = 0.8em,
        minimum height = 0.8em,
        font = \itshape,
    },
    null node/.style = {
        inner sep = 0pt,
        outer sep = 0pt,
        on chain,
    },
}


%% Code


%\NewDocumentCommand{\ds@RunSpecial}{ m m }{
%    \csuse{ds@#1@#2}
%}

\NewDocumentCommand{\ds@array@gap}{ m }{
    \node[array element, minimum width = 1pt, minimum height = 1pt] {#1};
    \expandafter\ifstrempty\expandafter{\ds@OptionValue}{}{
        \pgfmathsetmacro{\ds@local@Index}{int(\ds@OptionValue)}
    }
}

\NewDocumentCommand{\ds@OpenRight}{}{
    \node[array element, minimum width = 1em] (e) {};
    \draw (e.south east) -- (e.south west) -- (e.north west) -- (e.north east);
}
\NewDocumentCommand{\ds@OpenLeft}{}{
    \node[array element, minimum width = 1em] (e) {};
    \draw (e.north west) -- (e.north east) -- (e.south east) -- (e.south west);
}
\NewDocumentCommand{\ds@OpenAbove}{}{
    \node[array element, minimum height = 1em] (e) {};
    \draw (e.north west) -- (e.south west) -- (e.south east) -- (e.north east);
}
\NewDocumentCommand{\ds@OpenBelow}{}{
    \node[array element, minimum height = 1em] (e) {};
    \draw (e.south west) -- (e.north west) -- (e.north east) -- (e.south east);
}


\NewDocumentCommand{\ds@array@gapto}{}{
    \node[array element, minimum width = 0.75em, minimum height = 0.75em] {};
    \ds@array@gap{\ds@Dots}
    \node[array element, minimum width = 0.75em, minimum height = 0.75em] {};
}

\NewDocumentCommand{\ds@array@gaptoLR}{}{
    \ds@ArrayFrom
    \ds@array@gap{\ds@Dots}
    \ds@ArrayTo
}

\NewDocumentCommand{\ds@array@gaptoL}{}{
    \ds@ArrayFrom
    \ds@array@gap{\ds@Dots}
}
\NewDocumentCommand{\ds@array@gaptoR}{}{
    \ds@array@gap{\ds@Dots}
    \ds@ArrayTo
}


\NewDocumentCommand{\DSArray}{  >{ \TrimSpaces } O{} >{ \TrimSpaces } m }{%
    \begingroup%
    \pgfkeys{
        dsdraw array/.cd,
        name = array,
        #2
    }%
    \ifbool{ds@UseFrame}{%
        \csdef{ds@NodeDistance}{0.5pt}%
    }{%
        \csdef{ds@NodeDistance}{0pt}%
    }%
    \begin{scope}[
        start chain = \ds@ArrayName,
        node distance = \ds@NodeDistance,
        #1
    ]
        \tikzset{array element/.append = {fill = black}}
        \csdef{ds@local@Index}{\ds@FirstIndex}
        \ds@IterateList{\ds@local@Item}{\ds@ArrayValues}{
            \ds@IsValidOption{\ds@local@Item}{
                gap-to, gap-to(, gap-to), gap-to()
            }{
                %\ds@RunSpecial{array}{\ds@OptionName}
            }{
                \node[draw, array element] (\ds@ArrayName-\ds@local@Index) {};
                \node at (\ds@ArrayName-\ds@local@Index) {\ds@local@Item\strut};
                \ifbool{ds@ShowIndexes}{
                    \node[index element, array index = \ds@ArrayName-\ds@local@Index] (\ds@ArrayName-index-\ds@local@Index) {\textsmaller[3]{\ds@local@Index}};
                }{}
                \pgfmathsetmacro{\ds@local@Index}{int(\ds@local@Index + 1)}
            }
        }
        \whileboolexpr{ test {\ifnumless{\ds@local@Index}{\ds@ArrayWidth}} }{
            \node[draw, array element] (\ds@ArrayName-\ds@local@Index) {};
            \ifbool{ds@ShowIndexes}{
                \node[index element, array index = \ds@ArrayName-\ds@local@Index] (\ds@ArrayName-index-\ds@local@Index) {\textsmaller[3]{\ds@local@Index\strut}};
            }{}
            \pgfmathsetmacro{\ds@local@Index}{int(\ds@local@Index + 1)}
        }
        \ifbool{ds@UseFrame}{
            \ds@Frame
        }{}
    \end{scope}
    \endgroup
}