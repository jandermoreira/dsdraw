%! Package = dsdraw-array
%! Author = Jander Moreira (moreira.jander@gmail.com)
%! Date = 28/08/2024

\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{dsdraw-array}[2024/08/28 Draw arrays, such as vectors and matrices.]

\RequirePackage{tikz}
\usetikzlibrary{calc, chains, positioning}
\RequirePackage{pgfkeys}
\RequirePackage{varwidth}
\RequirePackage{relsize}
\RequirePackage{etoolbox}


%% Options
\newbool{ds@ShowIndexes}
\newbool{ds@UseFrame}

\pgfkeys{
    dsdraw/.cd,
%
    name/.store in = \ds@ArrayName,
%
    length/.store in = \ds@ArrayWidth,
    values/.store in = \ds@ArrayValues,
    width/.store in = \ds@ArrayWidth,
    height/.store in = \ds@ArrayHeight,
%
    direction/.is choice,
    direction/right/.code = {
        \tikzset{chain default direction = going right}
        \pgfkeysalso{indexes = below}
        \csdef{ds@Dots}{$\cdot\cdot\cdot$}
    },
    direction/left/.code = {
        \tikzset{chain default direction = going left}
        \pgfkeysalso{indexes = below}
        \csdef{ds@Dots}{$\cdot\cdot\cdot$}
    },
    direction/up/.code = {
        \tikzset{chain default direction = going above}
        \pgfkeysalso{indexes = left}
        \csdef{ds@Dots}{\rotatebox{90}{$\cdot\cdot\cdot$}}
    },
    direction/down/.code = {
        \tikzset{chain default direction = going below}
        \pgfkeysalso{indexes = left}
        \csdef{ds@Dots}{\rotatebox{90}{$\cdot\cdot\cdot$}}
    },
%
    first index/.store in = \ds@FirstIndex,
    indexes/.is choice,
    indexes/above/.code = {
        \tikzset{array index/.style = {above = of ##1.north}, align = center}
        \booltrue{ds@ShowIndexes}
    },
    indexes/below/.code = {
        \tikzset{array index/.style = {below = of ##1.south}, align = center}
        \booltrue{ds@ShowIndexes}
    },
    indexes/left/.code = {
        \tikzset{array index/.style = {left = of ##1.west}, align = right}
        \booltrue{ds@ShowIndexes}
    },
    indexes/right/.code = {
        \tikzset{array index/.style = {right = of ##1.east}, align = left}
        \booltrue{ds@ShowIndexes}
    },
    indexes/none/.code = {\boolfalse{ds@ShowIndexes}},
%
    frame/.is if = ds@UseFrame,
    width/.store in = \ds@CellWidth,
    height/.store in = \ds@CellHeight,
}

%% Defaults

\NewDocumentCommand{\DSSet}{ >{ \TrimSpaces } m }{%
    \pgfkeys{/dsdraw/.cd, #1}%
}

\DSSet{
    name = array,
    length = 1,
    values = {},
    direction = right,
    first index = 1,
    frame = false,
    width = 2.2em,
    height = 2.2em,
}

%% Styles

\tikzset{
    array element/.style = {
        inner sep = 0pt,
        minimum width = \ds@CellWidth,
        minimum height = \ds@CellHeight,
        on chain,
    },
    index element/.style = {
        baseline,
        minimum width = 0.8em,
        minimum height = 0.8em,
        font = \itshape,
    },
    null node/.style = {
        inner sep = 0pt,
        outer sep = 0pt,
        on chain,
    },
}


%% Code

\ExplSyntaxOn

\cs_generate_variant:Nn \tl_set:Nn { Ne }
\cs_new:Npn \is_valid_option:nnTF #1#2#3#4 {
    \tl_set:Ne \l_cell_value_tl { \tl_to_str:n { #1 } }
    \tl_set:Ne \l_first_token_tl { \tl_item:Nn \l_cell_value_tl { 1 } }
    \exp_args:No \str_if_eq:nnTF { \l_first_token_tl } { @ } {
        \regex_match:nnTF { \s*@[^=\s]+\s*=\s*.* } { \tl_to_str:n { #1 } } {
            \seq_clear_new:N \l_match_result_seq
            \seq_set_split:Nnn \l_match_result_seq { = } { #1 }
            \tl_set:Nf \ds@OptionName { \seq_item:Nn \l_match_result_seq { 1 } }
            \regex_replace_all:nnN { @ } {  } \ds@OptionName
            \tl_set:Nf \ds@OptionValue { \seq_item:Nn \l_match_result_seq { 2 } }
            \clist_if_in:noTF { #2 } { \ds@OptionName } {
                \regex_replace_all:nnN { @ } {  } \ds@OptionName
                \regex_replace_all:nnN { - } {  } \ds@OptionName
                #3
            } { #4 }
        } { #4 }
    } { #4 }
    %%\tl_set:No \l_ds_first_token_tl { #1  }
    %\exp_args:Nno
    %\exp_args:Nno \clist_if_in:nVTF { #2 } { \ds@OptionName } {
    %}{ \color{red}#4 }
}
\NewDocumentCommand{\ds@IsValidOption}{ >{ \TrimSpaces } m m +m +m}{
    \exp_args:No \is_valid_option:nnTF { #1 }{ #2 }{ #3 }{ #4 }
}

\cs_generate_variant:Nn \exp_args:Nn { No }
\cs_new:Npn \do_iterate:nnn #1#2#3 {
    \exp_args:No \clist_map_inline:nn { #2 } {
        \tl_set:Nn #1 { ##1 }
        #3
    }
}
\NewDocumentCommand{\ds@Iterate}{ m >{ \TrimSpaces } m +m}{
    \do_iterate:nnn { #1 } { #2 } { #3 }
}


\ExplSyntaxOff

\NewDocumentCommand{\ds@RunSpecial}{ m m }{
%\node[array element] {ds@#1@#2};
    \csuse{ds@#1@#2}
}

\NewDocumentCommand{\ds@array@gapto}{}{
    \ds@array@gap
    \pgfmathsetmacro{\ds@local@Index}{int(\ds@OptionValue)}
}

\NewDocumentCommand{\ds@array@gap}{}{
    \node[array element] {\ds@Dots};
}


\NewDocumentCommand{\DSArray}{  >{ \TrimSpaces } O{} >{ \TrimSpaces } m }{%
    \begingroup%
    \pgfkeys{
        dsdraw/.cd,
        name = array,
        #2
    }%
    \ifbool{ds@UseFrame}{%
        \csdef{ds@NodeDistance}{1pt}%
    }{%
        \csdef{ds@NodeDistance}{0pt}%
    }%
    \begin{scope}[
        start chain = \ds@ArrayName,
        node distance = \ds@NodeDistance,
        #1
    ]
        \tikzset{array element/.append = {fill = black}}
        \csdef{ds@local@Index}{\ds@FirstIndex}
        \ds@Iterate{\ds@local@Item}{\ds@ArrayValues}{
            \ds@IsValidOption{\ds@local@Item}{gap, gap-to}{
                \ds@RunSpecial{array}{\ds@OptionName}
            }{
                \node[draw, array element] (\ds@ArrayName-\ds@local@Index) {};
                \node at (\ds@ArrayName-\ds@local@Index) {\ds@local@Item\strut};
                \ifbool{ds@ShowIndexes}{
                    \node[index element, array index = \ds@ArrayName-\ds@local@Index] (\ds@ArrayName-index-\ds@local@Index) {\textsmaller[3]{\ds@local@Index}};
                }{}
                \pgfmathsetmacro{\ds@local@Index}{int(\ds@local@Index + 1)}
            }
        }
        \whileboolexpr{ test {\ifnumless{\ds@local@Index}{\ds@ArrayWidth}} }{
            \node[draw, array element] (\ds@ArrayName-\ds@local@Index) {};
            \ifbool{ds@ShowIndexes}{
                \node[index element, array index = \ds@ArrayName-\ds@local@Index] (\ds@ArrayName-index-\ds@local@Index) {\textsmaller[3]{\ds@local@Index\strut}};
            }{}
            \pgfmathsetmacro{\ds@local@Index}{int(\ds@local@Index + 1)}
        }
        \ifbool{ds@UseFrame}{
            \draw ($(\ds@ArrayName-begin.north west) + (-0.1em, 0.1em)$) rectangle ($(\ds@ArrayName-end.south east) + (0.1em, -0.1em)$);
        }{}
    \end{scope}
    \endgroup
}